#summary How to get CORE up and running quickly.

= Quickstart: Installation using pre-built packages =

CORE 4.2 packages are available for Ubuntu 11.04/10.10/10.04 and Fedora 14/15. If you want to run a different Linux distribution, make sure the kernel is at least 2.6.27 to support network namespaces. Released packages are generally more stable and tested to work properly on the given platform.

== Step 1. Install CORE package ==

Get the Ubuntu (deb) or Fedora (rpm) package for your architecture from here:<br>
[http://downloads.pf.itd.nrl.navy.mil/core/packages/4.2/linux/]

Use your package manager to automatically install dependencies:<br>
{{{
  # Ubuntu users (prior to 10.10)
  gdebi-gtk core_4.2-0ubuntu1_lucid_i386.deb
  # Ubuntu 10.10 (maverick)/ 11.04 (natty) users (specify entire path)
  software-center /home/user/Downloads/core_4.2-0ubuntu1_maverick_i386.deb
  # Fedora users
  su
  yum localinstall core-4.2-1.fc15.i686.rpm --nogpgcheck
}}}

Virtual networks usually require routing software. CORE automatically builds configs for the [http://www.quagga.net Quagga] routing suite. For wireless networks, CORE will generate OSPF MDR configs, a modified version of Quagga available from [http://cs.itd.nrl.navy.mil/work/ospf-manet/ here].
{{{
  # Ubuntu - vanilla Quagga
  sudo apt-get install quagga
  # Ubuntu - OSPF MDR Quagga
  gdebi-gtk quagga-mr_0.99.17mr2.0_i386.deb
  # Fedora - vanilla Quagga
  su
  yum install quagga
  # Fedora - OSPF MDR Quagga
  su
  yum localinstall quagga-0.99.17mr2.0-2011050501.f14.i386.rpm --nogpgcheck
}}}

== Step 2. Start the CORE services ==
{{{
  sudo /etc/init.d/core start
}}}

To view the CORE services log file, look at `/var/log/coredpy.log`.

== Step 3. Run CORE ==
{{{
  core
}}}

You'll see warnings about missing conf files the first time you run the CORE GUI.

The sample topology `/etc/core/configs/sample1.imn` will test that CORE and OSPF MDR Quagga are correctly installed.

= Quickstart: Installation from source =
Follow these instructions to build CORE from source. Dependencies are automatically resolved when you use your package manager with the CORE packages shown above, but not when compiling from source. The source used could be a released version (see above) or the bleeding-edge [http://downloads.pf.itd.nrl.navy.mil/core/source/nightly_snapshots/ nightly SVN snapshot].

== Step 1. Install prerequisite packages ==
Ubuntu:

`sudo apt-get install bash bridge-utils ebtables iproute libev3 libtk-img python tcl8.5 tk8.5 xterm autoconf automake gcc libev-dev make pkg-config python-dev libreadline-dev`

Fedora:

`yum install bash bridge-utils ebtables libev python tcl tk tkimg urw-fonts xauth xorg-x11-server-utils xterm autoconf automake gcc libev-devel  make pkgconfig python-devel readline-devel`

This package list comes from 
[http://pf.itd.nrl.navy.mil/core/core-html/Installation.html here].

You should also install Quagga for routing (`sudo apt-get install quagga`  or `yum install quagga`), or some other routing package. For wireless MANET networks, CORE can build configs for [http://cs.itd.nrl.navy.mil/work/ospf-manet/ OSPF MDR].


== Step 2. Get and build the source ==
You can get the latest SVN snapshot or a release version at the
[http://downloads.pf.itd.nrl.navy.mil/core/source/ downloads page].

In this example, we download the SVN source snapshot [http://downloads.pf.itd.nrl.navy.mil/core/source/nightly_snapshots/core-svnsnap.tgz core-svnsnap.tgz]

{{{
  tar xzf core-svnsnap.tgz
  cd core
  ./bootstrap.sh
  ./configure
  make
  sudo make install
}}}

== Step 3. Start the CORE daemon  ==
`sudo cored.py`

For verbose debugging:
`sudo cored.py -v`

Using the init script (messages go to `/var/log/coredpy.log`):
`sudo /etc/init.d/core start`

== Step 4. Run the CORE GUI ==
`core &` 

= Tips =
 * Once you see the CORE GUI, you can try loading one of the sample configuration such as `sample1.imn`
 * Check for notes on your Linux distribution on the [Linux] page.
 * CORE requires the Tcl/Tk packages, version 8.5. You may see warnings about specific package versions on FreeBSD, these may be safely ignored.
 * For system requirements and tips on the install process, visit the [http://pf.itd.nrl.navy.mil/core/core-html/Prerequisites.html Prerequisites] page of the [http://pf.itd.nrl.navy.mil/core/core-html/ CORE manual]; also refer to [http://www.freebsd.org], [http://www.centos.org], [http://www.openvz.org]

= Other Options =
 * *Do I need a custom kernel?* Not usually. Some disro's stock kernels may have issues, see [NamespaceKernels]. Some specific networking stack features may no support network namespaces, see [CustomKernels].

 * *VMware image*<br>*Pros:* everything is already set up for you; one file to download.  *Cons:* poor performance; for quick evaluation only.<br>[http://downloads.pf.itd.nrl.navy.mil/core/vmware-image/]<br>You can run CORE from within this pre-built VMware virtual machine with minimal setup. See the included vcore.txt in the zipfile for login information.  _Note that you may experience decreased performance and timer issues, and there is the added confusion of virtualization within virtualization. If you decide to run in this mode, we suggest using SSH with X11 forwarding into the VCORE virtual machine, to mitigate the decreased performance of the virtual display._

 * *Build from source* <br>To build a CORE machine *from scratch*, including patching and compiling your own CORE kernel, see the [http://pf.itd.nrl.navy.mil/core/core-html/Installing-from-Source.html Installing from Source] page of the [http://pf.itd.nrl.navy.mil/core/core-html/ CORE manual].